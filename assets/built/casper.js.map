{"version":3,"sources":["gallery-card.js","infinite-scroll.js","search.js","sticky-nav-title.js"],"names":["document","addEventListener","querySelectorAll","forEach","image","container","closest","ratio","attributes","width","value","height","style","flex","window","nextElement","querySelector","feedElement","buffer","ticking","loading","lastScrollY","scrollY","lastWindowHeight","innerHeight","lastDocumentHeight","documentElement","scrollHeight","onScroll","passive","onResize","requestTick","onPageLoad","this","status","removeEventListener","response","item","appendChild","importNode","resNextElement","href","onUpdate","xhr","XMLHttpRequest","responseType","open","send","requestAnimationFrame","Search","_ref","_this","input","showResult","contentApiKey","_ref$homeUrl","homeUrl","location","origin","_ref$resultTemplate","resultTemplate","_ref$singleResultTemp","singleResultTemplate","_ref$excerpt_length","excerpt_length","_ref$time_format","time_format","_classCallCheck2","_defineProperty2","retStr","obj","x","replace","RegExp","concat","_ref2","_asyncToGenerator2","_regenerator","mark","_callee","e","posts","filteredPosts","result","wrap","_context","prev","next","searchTerm","target","api","browse","fields","limit","sent","filter","post","title","toLowerCase","includes","slice","resultCount","length","innerHTML","map","replacerObj","url","primary_tag","name","primary_author","_post$primary_author","profile_image","feature_image","html","excerpt","DOMPurify","sanitize","ALLOWED_TAGS","split","join","allReplace","undefined","stop","_x","apply","arguments","doSearch","GhostContentAPI","key","version","Casper","stickyNavTitle","options","nav","navSelector","titleSelector","update","getBoundingClientRect","top","offsetHeight","classList","add","activeClass","remove"],"mappings":"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","file":"casper.js","sourcesContent":["/* eslint-env browser */\n\n/**\n * Gallery card support\n * Used on any individual post/page\n *\n * Detects when a gallery card has been used and applies sizing to make sure\n * the display matches what is seen in the editor.\n */\n\n(function (window, document) {\n    var resizeImagesInGalleries = function resizeImagesInGalleries() {\n        var images = document.querySelectorAll('.kg-gallery-image img');\n        images.forEach(function (image) {\n            var container = image.closest('.kg-gallery-image');\n            var width = image.attributes.width.value;\n            var height = image.attributes.height.value;\n            var ratio = width / height;\n            container.style.flex = ratio + ' 1 0%';\n        });\n    };\n\n    document.addEventListener('DOMContentLoaded', resizeImagesInGalleries);\n})(window, document);\n","/* eslint-env browser */\n\n/**\n * Infinite Scroll\n * Used on all pages where there is a list of posts (homepage, tag index, etc).\n *\n * When the page is scrolled to 300px from the bottom, the next page of posts\n * is fetched by following the the <link rel=\"next\" href=\"...\"> that is output\n * by {{ghost_head}}.\n *\n * The individual post items are extracted from the fetched pages by looking for\n * a wrapper element with the class \"post-card\". Any found elements are appended\n * to the element with the class \"post-feed\" in the currently viewed page.\n */\n\n(function (window, document) {\n    // next link element\n    var nextElement = document.querySelector('link[rel=next]');\n    if (!nextElement) {\n        return;\n    }\n\n    // post feed element\n    var feedElement = document.querySelector('.post-feed');\n    if (!feedElement) {\n        return;\n    }\n\n    var buffer = 300;\n\n    var ticking = false;\n    var loading = false;\n\n    var lastScrollY = window.scrollY;\n    var lastWindowHeight = window.innerHeight;\n    var lastDocumentHeight = document.documentElement.scrollHeight;\n\n    function onPageLoad() {\n        if (this.status === 404) {\n            window.removeEventListener('scroll', onScroll);\n            window.removeEventListener('resize', onResize);\n            return;\n        }\n\n        // append contents\n        var postElements = this.response.querySelectorAll('.post-card');\n        postElements.forEach(function (item) {\n            // document.importNode is important, without it the item's owner\n            // document will be different which can break resizing of\n            // `object-fit: cover` images in Safari\n            feedElement.appendChild(document.importNode(item, true));\n        });\n\n        // set next link\n        var resNextElement = this.response.querySelector('link[rel=next]');\n        if (resNextElement) {\n            nextElement.href = resNextElement.href;\n        } else {\n            window.removeEventListener('scroll', onScroll);\n            window.removeEventListener('resize', onResize);\n        }\n\n        // sync status\n        lastDocumentHeight = document.documentElement.scrollHeight;\n        ticking = false;\n        loading = false;\n    }\n\n    function onUpdate() {\n        // return if already loading\n        if (loading) {\n            return;\n        }\n\n        // return if not scroll to the bottom\n        if (lastScrollY + lastWindowHeight <= lastDocumentHeight - buffer) {\n            ticking = false;\n            return;\n        }\n\n        loading = true;\n\n        var xhr = new window.XMLHttpRequest();\n        xhr.responseType = 'document';\n\n        xhr.addEventListener('load', onPageLoad);\n\n        xhr.open('GET', nextElement.href);\n        xhr.send(null);\n    }\n\n    function requestTick() {\n        ticking || window.requestAnimationFrame(onUpdate);\n        ticking = true;\n    }\n\n    function onScroll() {\n        lastScrollY = window.scrollY;\n        requestTick();\n    }\n\n    function onResize() {\n        lastWindowHeight = window.innerHeight;\n        lastDocumentHeight = document.documentElement.scrollHeight;\n        requestTick();\n    }\n\n    window.addEventListener('scroll', onScroll, {passive: true});\n    window.addEventListener('resize', onResize);\n\n    requestTick();\n})(window, document);\n","(function (window, document) {\n    const resultDefaultTemplate = `<ul style=\"list-style: none;\">\n    <p class=\"modal-overlay-description\" style=\"margin-top: 20px;\">Найдено совпадений: ##resultCount</p>\n    ##results\n</ul>`;\n    const singleResultDefaultTemplate = `<li><a href=\"##url\">##title</a></li>`;\n\n    class Search {\n        resultCount = 0;\n\n        constructor({\n            input,\n            showResult,\n            contentApiKey,\n            homeUrl = window.location.origin,\n            resultTemplate = resultDefaultTemplate,\n            singleResultTemplate = singleResultDefaultTemplate,\n            excerpt_length = 15,\n            time_format = \"MMMM Do YYYY\",\n        }) {\n            /**\n             * Options\n             */\n            this.input = document.querySelector(input);\n            this.homeUrl = homeUrl;\n            this.contentApiKey = contentApiKey;\n            this.resultTemplate = resultTemplate;\n            this.singleResultTemplate = singleResultTemplate;\n            this.showResult = document.querySelector(showResult);\n\n            this.excerpt_length = excerpt_length;\n            this.time_format = time_format;\n\n            /**\n             * trigger when user type to search\n             */\n            this.input.addEventListener(\"keyup\", this.doSearch);\n\n            /**\n             * Initialize ghost content api constructor\n             */\n            this.api = new GhostContentAPI({\n                url: this.homeUrl,\n                key: this.contentApiKey,\n                version: \"v3\",\n            });\n        }\n\n        // Concept source: https://stackoverflow.com/a/17606289/3705299\n        allReplace = (retStr, obj) => {\n            for (let x in obj) {\n                retStr = retStr.replace(new RegExp(`##${x}`, \"g\"), obj[x]);\n            }\n            return retStr;\n        };\n\n        doSearch = async (e) => {\n            this.searchTerm = e.target.value;\n            const posts = await this.api.posts.browse({\n                fields: `title,url`,\n                limit: 500,\n            });\n\n            const filteredPosts = posts\n                .filter((post) => {\n                    // let contentText = DOMPurify.sanitize(post.html, { ALLOWED_TAGS: [''] })\n\n                    return post.title\n                        .toLowerCase()\n                        .includes(this.searchTerm.toLowerCase());\n                })\n                .slice(0, 10);\n\n            this.resultCount = filteredPosts.length;\n\n            // if searchTerm's length is less then 1 character then stop here...\n            if (this.searchTerm.length <= 2) {\n                this.showResult.innerHTML = \"\";\n            } else {\n                const result = filteredPosts\n                    .map((post) => {\n                        let replacerObj = {};\n\n                        /**\n                         * ##title\n                         */\n                        if (post.title) {\n                            replacerObj[\"title\"] = post.title;\n                        }\n                        /**\n                         * ##url\n                         */\n                        if (post.title) {\n                            replacerObj[\"url\"] = post.url;\n                        }\n\n                        /**\n                         * Tag fileds\n                         * ------------------------\n                         * primary_tag_name\n                         * primary_tag_url\n                         */\n                        if (post.primary_tag) {\n                            replacerObj[\"primary_tag_name\"] =\n                                post.primary_tag.name;\n                            replacerObj[\"primary_tag_url\"] =\n                                post.primary_tag.url;\n                        }\n\n                        /**\n                         * Author fileds\n                         * ------------------------\n                         * primary_author_name\n                         * primary_author_url\n                         * primary_author_avater\n                         */\n                        if (post.primary_author) {\n                            const {\n                                name,\n                                profile_image,\n                                url,\n                            } = post.primary_author;\n                            replacerObj[\"primary_author_name\"] = name;\n                            replacerObj[\"primary_author_url\"] = url;\n                            replacerObj[\n                                \"primary_author_avater\"\n                            ] = profile_image;\n                        }\n                        /**\n                         * ------------------------\n                         * feature_image\n                         */\n                        if (post.feature_image) {\n                            replacerObj[\"feature_image\"] = post.feature_image;\n                        }\n\n                        /**\n                         * Excerpt\n                         * ---------------\n                         * ##excerpt\n                         */\n                        if (post.html) {\n                            let excerpt = DOMPurify.sanitize(post.html, {\n                                ALLOWED_TAGS: [\"\"],\n                            })\n                                .split(\" \")\n                                .slice(0, this.excerpt_length)\n                                .join(\" \");\n                            replacerObj[\"excerpt\"] = excerpt;\n                        }\n\n                        /**\n                         * Result Count\n                         */\n                        replacerObj[\"resultCount\"] = this.resultCount;\n\n                        return this.allReplace(\n                            this.singleResultTemplate,\n                            replacerObj\n                        );\n                    }) // map\n                    .join(\" \");\n\n                // Push result html\n                this.showResult.innerHTML =\n                    this.resultTemplate !== undefined\n                        ? this.resultTemplate\n                              .replace(\"##results\", result)\n                              .replace(\"##resultCount\", this.resultCount)\n                        : result;\n            }\n        };\n    }\n    window.Search = Search;\n})(window, document);\n","/* eslint-env browser */\n\n/**\n * Nav/Title replacement\n * Used on invividual post pages, displays the post title in place of the nav\n * bar when scrolling past the title\n *\n * Usage:\n * ```\n * Casper.stickyTitle({\n *     navSelector: '.site-nav-main',\n *     titleSelector: '.post-full-title',\n *     activeClass: 'nav-post-title-active'\n * });\n * ```\n */\n\n(function (window, document) {\n    // set up Casper as a global object\n    if (!window.Casper) {\n        window.Casper = {};\n    }\n\n    window.Casper.stickyNavTitle = function stickyNavTitle(options) {\n        var nav = document.querySelector(options.navSelector);\n        var title = document.querySelector(options.titleSelector);\n\n        var lastScrollY = window.scrollY;\n        var ticking = false;\n\n        function onScroll() {\n            lastScrollY = window.scrollY;\n            requestTick();\n        }\n\n        function requestTick() {\n            if (!ticking) {\n                requestAnimationFrame(update);\n            }\n            ticking = true;\n        }\n\n        function update() {\n            var trigger = title.getBoundingClientRect().top + window.scrollY;\n            var triggerOffset = title.offsetHeight + 35;\n\n            // show/hide post title\n            if (lastScrollY >= trigger + triggerOffset) {\n                nav.classList.add(options.activeClass);\n            } else {\n                nav.classList.remove(options.activeClass);\n            }\n\n            ticking = false;\n        }\n\n        window.addEventListener('scroll', onScroll, {passive: true});\n\n        update();\n    };\n})(window, document);\n"]}